{% if current_buffer_context.text %}
Let's establish the context of the current file:

<current_file_context>
<path>{{current_buffer_context.path}}</path>
<filetype>{{current_buffer_context.filetype}}</filetype>
<content>
{{current_buffer_context.text | trim}}
</content>
</current_file_context>

{% endif %}
{% if visual_selection %}
Now, here's the specific code snippet you need to work on:

<code_snippet>
<language>{{current_buffer_context.filetype}}</language>
<selected_code>
{{visual_selection | trim}}
</selected_code>
</code_snippet>

{% endif %}
{% if replace %}
Here's the user's specific query or instruction:
<user_query>
{{user_query | trim}}
</user_query>
{% else %}
Here's the user's specific query or instruction:
<user_query>
{{user_query | trim}}
</user_query>

<instructions>
Your task is to improve this code snippet by following these steps:

1. Analyze the code:
   a. Identify and list syntax errors
   b. Identify and list logical errors
   c. Identify and list unimplemented functionality
   d. Consider and note potential edge cases or unintended consequences
   e. Identify and list bad coding practices that need correction
   f. Focus on the selected code and its immediate context
   g. Consider how changes will affect the broader context of the file

2. Plan your changes:
   - Determine the most efficient approach to fix errors and implement missing features
   - Ensure your planned changes maintain the original intent and the user's unique coding style
   - Consider how your changes might affect performance and readability
   - Avoid introducing unnecessary dependencies or complexity
   - Explicitly consider the performance implications of planned changes

3. Implement the improvements:
   - Fix all identified errors
   - Implement any missing functionality described in the comments
   - Maintain the original code style and formatting unless it directly contributes to the errors
   - Keep relevant comments, including those used to guide your changes
   - If you make significant changes, add brief, clear comments explaining your modifications

4. Review and finalize:
   - Ensure your changes have addressed all issues and requirements
   - Verify that the final code is valid and ready to run in the specified language
   - Check that your changes don't introduce new problems or unintended side effects
   - Consider how your changes might affect the broader context of the file

Wrap your analysis inside <code_review> tags, showing your thought process before implementing the changes. Then, wrap the corrected and implemented code inside <corrected_code> tags.

Remember:
- Only output valid code without any backticks or surrounding markdown
- Do not add features or functionality beyond what is explicitly mentioned in the code or comments
- Focus on substituting the user's selection with a valid code fragment, considering the given context
- Provide thoughtful but brief and direct feedback
- Speak as an expert in low-level concepts, identifying and correcting bad practices while preserving the user's unique style
</instructions>

Now, please proceed with your analysis and code correction.
{% endif %}

